{"google":"","body":"# Hot Potato\r\n\r\nA Real-time Processing Framework\r\n\r\n## Description\r\n\r\nHot Potato is an open source real-time processing framework written in Ruby. Originally designed to process the Twitter firehose at 3,000+ tweets per second, it has been extended to support any type of streaming data as input or output to the framework. The framework excels with applications such as, social media analysis, log processing, fraud prevention, spam detection, instant messaging, and many others that include the processing of streaming data.\r\n\r\n## What is it?\r\n\r\n* Written in Ruby (requires 1.9)\r\n* Handles streaming data\r\n* Designed for scale (can easily handle the twitter firehose on one server)\r\n* Simple interface for writing AppTasks\r\n\r\n# Getting Started\r\n\r\nStart by downloading the gem (this requires Ruby 1.9):\r\n\r\n```bash\r\n$ gem install hot_potato\r\n```\r\n\r\nNext create a project:\r\n\r\n```bash\r\n$ hotpotato sample\r\nHot Potato (v0.12.1)\r\nGenerating application sample...\r\n    create  sample\r\n    add     sample/Gemfile\r\n    add     sample/Rakefile\r\n    create  sample/app\r\n    create  sample/bin\r\n    add     sample/bin/admin\r\n    add     sample/bin/app_task\r\n    add     sample/bin/supervisor\r\n    create  sample/config\r\n    add     sample/config/boot.rb\r\n    add     sample/config/config.yml\r\n    add     sample/config/routes.rb\r\n    create  sample/docs\r\n    create  sample/logs\r\n    create  sample/test\r\n    create  sample/tmp\r\n```\r\n\r\n## Generating AppTasks\r\n\r\nTo help with creating AppTasks, there is a generator available:\r\n\r\n```bash\r\n$ bin/generate [faucet|worker|sink] name\r\n```\r\n\r\n# The Details\r\n\r\n## Environments\r\n\r\nBy setting the RACK_ENV environment variable, one can control which environment is loaded.\r\nBy default there are three: development, test, and production.\r\n\r\n## AppTasks\r\n\r\nAppTasks are the controllers in the framework.  The Supervisor (See below) is responsible for\r\nstarting AppTasks.  There are three types:\r\n\r\n### Faucets\r\n\r\nFaucets inject data into the system.  Examples include: Twitter Reader, SMTP, and Tail Log File.\r\nEach faucet is a ruby file in the app directory that extends HotPotato::Faucet and implements\r\nthe perform method.  For each message received, the method should call the send_message to send\r\nit to the next AppTask.\r\n\r\n```ruby\r\nclass TwitterFaucet < HotPotato::Faucet\r\n\r\n  def perform\r\n    TweetStream::Client.new(\"user\", \"secret\").sample do |s|\r\n      message = {}\r\n      message[\"username\"] = s.user.screen_name\r\n      message[\"text\"]     = s.text\r\n      send_message message\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\n### Workers\r\n\r\nWorkers manipulate data from other workers or faucets.  Examples include: Calculate Scores, Merge \r\nData, and Filter Data.  Each worker is a ruby file in the app directory that extends HotPotato::Worker\r\nand implements the perform(message) method.  For each message the worker wants to send to the next AppTask,\r\nthe send_message method should be called.\r\n\r\n```ruby\r\nclass Influencer < HotPotato::Worker\r\n\r\n  def perform(message)\r\n    message[\"influence\"] = rand(100)\r\n    send_message message\r\n  end\r\n\r\nend\r\n```\r\n\r\n### Sinks\r\n\r\nSinks send data out of the system.  Examples include: WebSocket, Database (Data Warehouse), and \r\nFile Writer.  Each sink is a ruby file in the app directory that extends HotPotato::Sink and implements\r\nthe perform(message) method.  There is no send_message for the sink to call since it is a final destination\r\nfor the message.\r\n\r\n```ruby\r\nclass LogWriter < HotPotato::Sink\r\n\r\n  def perform(message)\r\n    log.debug \"#{message[\"username\"]}:#{message[\"influence\"]}\"\r\n  end\r\n\r\nend\r\n```\r\n\r\n## Supervisor\r\n\r\nThe supervisor is a process that runs on each machine that participates in the cluster.\r\nWhen it starts it does the following:\r\n\r\n0. Read the routes file\r\n1. Connect to the Redis server and get the appTask process ID table\r\n2. Acquire the global lock\r\n3. If a process is needed, fork a new process for AppTask\r\n4. Release the global lock\r\n5. Rinse and Repeat\r\n\r\nThe supervisor also starts the Heartbeat service and logging service as background threads.\r\n\r\nThe supervisor can be managed from the command line:\r\n\r\n```bash\r\n$ bin/supervisor [run|start|stop|restart]\r\n```\r\n\r\nIf started without any settings, it will default to run.\r\n\r\n## Admin Server\r\n\r\nThe admin server is a Sinatra-based application to display statistical and diagnostic information.\r\n\r\nThe admin server can be managed from the command line:\r\n\r\n```\r\n$ bin/admin --help\r\n\r\nUsage: ./admin [options]\r\n\r\nVegas options:\r\n  -K, --kill               kill the running process and exit\r\n  -S, --status             display the current running PID and URL then quit\r\n  -s, --server SERVER      serve using SERVER (thin/mongrel/webrick)\r\n  -o, --host HOST          listen on HOST (default: 0.0.0.0)\r\n  -p, --port PORT          use PORT (default: 5678)\r\n  -x, --no-proxy           ignore env proxy settings (e.g. http_proxy)\r\n  -e, --env ENVIRONMENT    use ENVIRONMENT for defaults (default: development)\r\n  -F, --foreground         don't daemonize, run in the foreground\r\n  -L, --no-launch          don't launch the browser\r\n  -d, --debug              raise the log level to :debug (default: :info)\r\n      --app-dir APP_DIR    set the app dir where files are stored (default: ~/.vegas/Hot_Potato_Admin_Server)/)\r\n  -P, --pid-file PID_FILE  set the path to the pid file (default: app_dir/Hot_Potato_Admin_Server.pid)\r\n      --log-file LOG_FILE  set the path to the log file (default: app_dir/Hot_Potato_Admin_Server.log)\r\n      --url-file URL_FILE  set the path to the URL file (default: app_dir/Hot_Potato_Admin_Server.url)\r\n\r\nCommon options:\r\n  -h, --help               Show this message\r\n      --version            Show version\r\n```\r\n\t\r\nThe page can be accessed at http://localhost:5678\r\n\r\n## Routes\r\n\r\nThe routes file (config/routes.rb) is a Ruby DSL that does the following:\r\n\r\n* Defines AppTasks (Faucets, Workers, Sinks)\r\n* Defines processing chain for AppTasks\r\n* Restrict AppTasks to a host group\r\n* Limit number of instances\r\n\r\nExample:\r\n\r\n```ruby\r\nHotPotato::Route.build do\r\n\r\n  faucet :twitter_faucet\r\n  worker :influencer, :source => :twitter_faucet\r\n  sink :log_writer, :source => :influencer\r\n\r\nend\r\n```\r\n\r\nMultiple sources can be attached to a worker or sink:\r\n\r\n```ruby\r\nworker :influencer, :source => [:twitter_faucet. :other_source]\r\n```\r\n\r\nThe number of instances is set to 1.  This can be changed by setting the number of instances:\r\n\r\n```ruby\r\nworker :influencer, :source => :twitter_faucet, :instances => 2\r\n```\r\n\r\nAppTasks can be limited to a specific server (or set of servers) by creating a group in the \r\nconfig/config.yml file:\r\n\r\n```yaml\r\ndevelopment:\r\n  redis_hostname: localhost\r\n  redis_port: 6379\r\n  servers:\r\n    - hostname: worker01\r\n      group: incoming\r\n      max_app_tasks: 15\r\n    - hostname: worker02\r\n      group: worker\r\n      max_app_tasks: 15\r\n```\r\n\r\nand specifying the group in the routes files:\r\n\r\n```ruby\r\nfaucet :twitter_faucet, :group => :incoming\r\n```\r\n\r\n# Support\r\n\r\nIf you have a question try our group: http://groups.google.com/group/hotpotato-rb\r\n\r\nIf you have a bug, file it in GitHub.\r\n\r\n# Contributing\r\n\r\n[Fork the project](http://github.com/dshimy/HotPotato) and send pull requests.\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Hot Potato is an open source real-time processing framework written in Ruby","name":"Hot Potato"}